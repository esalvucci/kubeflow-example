steps:
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_DATA_INGESTION:$SHORT_SHA', '.']
    dir: $_COMPONENTS_FOLDER/$_DATA_INGESTION
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_DATA_PREPARATION:$SHORT_SHA', '.']
    dir: $_COMPONENTS_FOLDER/$_DATA_PREPARATION
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_MODEL_TRAINING:$SHORT_SHA', '.']
    dir: $_COMPONENTS_FOLDER/$_MODEL_TRAINING
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_MODEL_EVALUATION:$SHORT_SHA', '.']
    dir: $_COMPONENTS_FOLDER/$_MODEL_EVALUATION
  - name: 'gcr.io/$_PROJECT_ID/kfp-cli'
    env:
      - 'DOCKER_CONTAINER_REGISTRY_BASE_URL=$_DOCKER_CONTAINER_REGISTRY_BASE_URL'
      - 'TAG=$SHORT_SHA'
      - 'HOST=$_ENDPOINT'
    args:
      - '-c'
      - 'dsl-compile --py pipeline.py --output training_pipeline.tar.gz &&
        kfp --endpoint $ENDPOINT upload-version -p "${_TRAINING_PIPELINE_NAME}" -v ${SHORT_SHA} training_pipeline.tar.gz'
    dir: $_TRAINING_PIPELINE_FOLDER
  - name: 'gcr.io/$_PROJECT_ID/kfp-cli'
    args:
      - '-c'
      - 'kfp --endpoint $ENDPOINT run submit -e $_EXPERIMENT_NAME -r ${SHORT_SHA} -p ${SHORT_SHA}'
    dir: $_TRAINING_PIPELINE_FOLDER

images:
  - '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_DATA_INGESTION:$SHORT_SHA'
  - '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_DATA_PREPARATION:$SHORT_SHA'
  - '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_MODEL_TRAINING:$SHORT_SHA'
  - '$_DOCKER_CONTAINER_REGISTRY_BASE_URL/forecasting_example/$_MODEL_EVALUATION:$SHORT_SHA'